
LAB3_Exercises.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002518  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002648  08002648  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002648  08002648  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002648  08002648  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  0800265c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800265c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000952b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a35  00000000  00000000  00029560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002af98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aac  00000000  00000000  0002c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b151  00000000  00000000  00042d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082563  00000000  00000000  0004decd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  000d0484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800260c 	.word	0x0800260c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800260c 	.word	0x0800260c

0800014c <initialize_variable>:
#include "global.h"

void initialize_variable() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	// Variable for function mode1_normal()
	red_timer = 5;
 8000150:	4b12      	ldr	r3, [pc, #72]	; (800019c <initialize_variable+0x50>)
 8000152:	2205      	movs	r2, #5
 8000154:	601a      	str	r2, [r3, #0]
	green_timer = 3;
 8000156:	4b12      	ldr	r3, [pc, #72]	; (80001a0 <initialize_variable+0x54>)
 8000158:	2203      	movs	r2, #3
 800015a:	601a      	str	r2, [r3, #0]
	yellow_timer = 2;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <initialize_variable+0x58>)
 800015e:	2202      	movs	r2, #2
 8000160:	601a      	str	r2, [r3, #0]
	counter = red_timer + green_timer + yellow_timer;
 8000162:	4b0e      	ldr	r3, [pc, #56]	; (800019c <initialize_variable+0x50>)
 8000164:	681a      	ldr	r2, [r3, #0]
 8000166:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <initialize_variable+0x54>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	441a      	add	r2, r3
 800016c:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <initialize_variable+0x58>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4413      	add	r3, r2
 8000172:	4a0d      	ldr	r2, [pc, #52]	; (80001a8 <initialize_variable+0x5c>)
 8000174:	6013      	str	r3, [r2, #0]
	display_1 = 0;
 8000176:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <initialize_variable+0x60>)
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
	display_2 = 0;
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <initialize_variable+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
	counter_mode1 = 100;
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <initialize_variable+0x68>)
 8000184:	2264      	movs	r2, #100	; 0x64
 8000186:	601a      	str	r2, [r3, #0]

	// Variable for display mode and value
	index_mode = 0;
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <initialize_variable+0x6c>)
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
	TIMER_CYCLE = 10;
 800018e:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <initialize_variable+0x70>)
 8000190:	220a      	movs	r2, #10
 8000192:	601a      	str	r2, [r3, #0]
}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000005c 	.word	0x2000005c
 80001a0:	20000054 	.word	0x20000054
 80001a4:	20000050 	.word	0x20000050
 80001a8:	20000070 	.word	0x20000070
 80001ac:	2000006c 	.word	0x2000006c
 80001b0:	20000044 	.word	0x20000044
 80001b4:	20000058 	.word	0x20000058
 80001b8:	20000040 	.word	0x20000040
 80001bc:	2000007c 	.word	0x2000007c

080001c0 <fsm_for_input_processing>:

enum ButtonState { STATE_1 = 0 , STATE_2 = 1 , STATE_3 = 2 , STATE_4 = 3} ;
enum ButtonState buttonState = STATE_1 ;
enum ButtonIndex { PRESS_BUTTON_1 = 0 , PRESS_BUTTON_2 = 1 , PRESS_BUTTON_3 = 2};

void fsm_for_input_processing ( void ) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	switch ( buttonState ){
 80001c4:	4b78      	ldr	r3, [pc, #480]	; (80003a8 <fsm_for_input_processing+0x1e8>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b03      	cmp	r3, #3
 80001ca:	f200 80e1 	bhi.w	8000390 <fsm_for_input_processing+0x1d0>
 80001ce:	a201      	add	r2, pc, #4	; (adr r2, 80001d4 <fsm_for_input_processing+0x14>)
 80001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d4:	080001e5 	.word	0x080001e5
 80001d8:	0800020b 	.word	0x0800020b
 80001dc:	08000291 	.word	0x08000291
 80001e0:	08000315 	.word	0x08000315
		case STATE_1 :
			// Display the traffic light application is running normally
			mode1_normal () ;
 80001e4:	f000 fbaa 	bl	800093c <mode1_normal>
			// When button 1 is pressed , go to the next state
			if( is_button_pressed ( PRESS_BUTTON_1 ) == 1) {
 80001e8:	2000      	movs	r0, #0
 80001ea:	f000 f9ad 	bl	8000548 <is_button_pressed>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b01      	cmp	r3, #1
 80001f2:	f040 80cf 	bne.w	8000394 <fsm_for_input_processing+0x1d4>
				clearLED () ;
 80001f6:	f000 f9c7 	bl	8000588 <clearLED>
				buttonState = STATE_2 ;
 80001fa:	4b6b      	ldr	r3, [pc, #428]	; (80003a8 <fsm_for_input_processing+0x1e8>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
				red_temp = red_timer ;
 8000200:	4b6a      	ldr	r3, [pc, #424]	; (80003ac <fsm_for_input_processing+0x1ec>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a6a      	ldr	r2, [pc, #424]	; (80003b0 <fsm_for_input_processing+0x1f0>)
 8000206:	6013      	str	r3, [r2, #0]
			}
			break ;
 8000208:	e0c4      	b.n	8000394 <fsm_for_input_processing+0x1d4>
		case STATE_2 :
			// Display 2 red LEDS , LED7 - SEG for mode and LED7_SEG for value
			HAL_GPIO_WritePin ( GPIOA , RED_1_Pin | RED_2_Pin , GPIO_PIN_RESET ) ;
 800020a:	2200      	movs	r2, #0
 800020c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000210:	4868      	ldr	r0, [pc, #416]	; (80003b4 <fsm_for_input_processing+0x1f4>)
 8000212:	f001 f9f2 	bl	80015fa <HAL_GPIO_WritePin>
			if( timer_MODE_flag == 1) {
 8000216:	4b68      	ldr	r3, [pc, #416]	; (80003b8 <fsm_for_input_processing+0x1f8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d112      	bne.n	8000244 <fsm_for_input_processing+0x84>
				update7SEG_VALUE ( index_mode , red_temp ) ;
 800021e:	4b67      	ldr	r3, [pc, #412]	; (80003bc <fsm_for_input_processing+0x1fc>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a63      	ldr	r2, [pc, #396]	; (80003b0 <fsm_for_input_processing+0x1f0>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	4611      	mov	r1, r2
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fb41 	bl	80008b0 <update7SEG_VALUE>
				update7SEG_MODE ( index_mode , 2) ;
 800022e:	4b63      	ldr	r3, [pc, #396]	; (80003bc <fsm_for_input_processing+0x1fc>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2102      	movs	r1, #2
 8000234:	4618      	mov	r0, r3
 8000236:	f000 faf5 	bl	8000824 <update7SEG_MODE>
				index_mode ++;
 800023a:	4b60      	ldr	r3, [pc, #384]	; (80003bc <fsm_for_input_processing+0x1fc>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	3301      	adds	r3, #1
 8000240:	4a5e      	ldr	r2, [pc, #376]	; (80003bc <fsm_for_input_processing+0x1fc>)
 8000242:	6013      	str	r3, [r2, #0]
			}
			// When button 2 is pressed , red light value temporarily increased by 1 in a range of 1 -99
			if( is_button_pressed ( PRESS_BUTTON_2 ) == 1) {
 8000244:	2001      	movs	r0, #1
 8000246:	f000 f97f 	bl	8000548 <is_button_pressed>
 800024a:	4603      	mov	r3, r0
 800024c:	2b01      	cmp	r3, #1
 800024e:	d104      	bne.n	800025a <fsm_for_input_processing+0x9a>
				red_temp += 1;
 8000250:	4b57      	ldr	r3, [pc, #348]	; (80003b0 <fsm_for_input_processing+0x1f0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	4a56      	ldr	r2, [pc, #344]	; (80003b0 <fsm_for_input_processing+0x1f0>)
 8000258:	6013      	str	r3, [r2, #0]
			}
			// When button 3 is pressed , set temporary red light value to red light value
			if( is_button_pressed ( PRESS_BUTTON_3 ) == 1) {
 800025a:	2002      	movs	r0, #2
 800025c:	f000 f974 	bl	8000548 <is_button_pressed>
 8000260:	4603      	mov	r3, r0
 8000262:	2b01      	cmp	r3, #1
 8000264:	d103      	bne.n	800026e <fsm_for_input_processing+0xae>
				red_timer = red_temp ;
 8000266:	4b52      	ldr	r3, [pc, #328]	; (80003b0 <fsm_for_input_processing+0x1f0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a50      	ldr	r2, [pc, #320]	; (80003ac <fsm_for_input_processing+0x1ec>)
 800026c:	6013      	str	r3, [r2, #0]
			}
			// When button 1 is pressed , go to the next state
			if( is_button_pressed ( PRESS_BUTTON_1 ) == 1) {
 800026e:	2000      	movs	r0, #0
 8000270:	f000 f96a 	bl	8000548 <is_button_pressed>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	f040 808e 	bne.w	8000398 <fsm_for_input_processing+0x1d8>
				clearLED () ;
 800027c:	f000 f984 	bl	8000588 <clearLED>
				buttonState = STATE_3 ;
 8000280:	4b49      	ldr	r3, [pc, #292]	; (80003a8 <fsm_for_input_processing+0x1e8>)
 8000282:	2202      	movs	r2, #2
 8000284:	701a      	strb	r2, [r3, #0]
				yellow_temp = yellow_timer ;
 8000286:	4b4e      	ldr	r3, [pc, #312]	; (80003c0 <fsm_for_input_processing+0x200>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a4e      	ldr	r2, [pc, #312]	; (80003c4 <fsm_for_input_processing+0x204>)
 800028c:	6013      	str	r3, [r2, #0]
			}
			break ;
 800028e:	e083      	b.n	8000398 <fsm_for_input_processing+0x1d8>
		case STATE_3 :
			// Display 2 yellow LEDS , LED7 - SEG for mode and LED7_SEG for value
			HAL_GPIO_WritePin ( GPIOA , YELLOW_1_Pin | YELLOW_2_Pin , GPIO_PIN_RESET ) ;
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000296:	4847      	ldr	r0, [pc, #284]	; (80003b4 <fsm_for_input_processing+0x1f4>)
 8000298:	f001 f9af 	bl	80015fa <HAL_GPIO_WritePin>
			if( timer_MODE_flag == 1) {
 800029c:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <fsm_for_input_processing+0x1f8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d112      	bne.n	80002ca <fsm_for_input_processing+0x10a>
				update7SEG_VALUE ( index_mode , yellow_temp ) ;
 80002a4:	4b45      	ldr	r3, [pc, #276]	; (80003bc <fsm_for_input_processing+0x1fc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a46      	ldr	r2, [pc, #280]	; (80003c4 <fsm_for_input_processing+0x204>)
 80002aa:	6812      	ldr	r2, [r2, #0]
 80002ac:	4611      	mov	r1, r2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fafe 	bl	80008b0 <update7SEG_VALUE>
				update7SEG_MODE ( index_mode , 3) ;
 80002b4:	4b41      	ldr	r3, [pc, #260]	; (80003bc <fsm_for_input_processing+0x1fc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2103      	movs	r1, #3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fab2 	bl	8000824 <update7SEG_MODE>
				index_mode ++;
 80002c0:	4b3e      	ldr	r3, [pc, #248]	; (80003bc <fsm_for_input_processing+0x1fc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	4a3d      	ldr	r2, [pc, #244]	; (80003bc <fsm_for_input_processing+0x1fc>)
 80002c8:	6013      	str	r3, [r2, #0]
			}
			// When button 2 is pressed , yellow light value temporarily increased by 1 in a range of 1 -99
			if( is_button_pressed ( PRESS_BUTTON_2 ) == 1) {
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 f93c 	bl	8000548 <is_button_pressed>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d104      	bne.n	80002e0 <fsm_for_input_processing+0x120>
				yellow_temp += 1;
 80002d6:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <fsm_for_input_processing+0x204>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a39      	ldr	r2, [pc, #228]	; (80003c4 <fsm_for_input_processing+0x204>)
 80002de:	6013      	str	r3, [r2, #0]
			}
			// When button 3 is pressed , set temporary yellow light value to yellow light value
			if( is_button_pressed ( PRESS_BUTTON_3 ) == 1) {
 80002e0:	2002      	movs	r0, #2
 80002e2:	f000 f931 	bl	8000548 <is_button_pressed>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d103      	bne.n	80002f4 <fsm_for_input_processing+0x134>
				yellow_timer = yellow_temp ;
 80002ec:	4b35      	ldr	r3, [pc, #212]	; (80003c4 <fsm_for_input_processing+0x204>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a33      	ldr	r2, [pc, #204]	; (80003c0 <fsm_for_input_processing+0x200>)
 80002f2:	6013      	str	r3, [r2, #0]
			}
			// When button 1 is pressed , go to the next state
			if( is_button_pressed ( PRESS_BUTTON_1 ) == 1) {
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 f927 	bl	8000548 <is_button_pressed>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d14d      	bne.n	800039c <fsm_for_input_processing+0x1dc>
				clearLED () ;
 8000300:	f000 f942 	bl	8000588 <clearLED>
				buttonState = STATE_4 ;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <fsm_for_input_processing+0x1e8>)
 8000306:	2203      	movs	r2, #3
 8000308:	701a      	strb	r2, [r3, #0]
				green_temp = green_timer ;
 800030a:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <fsm_for_input_processing+0x208>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <fsm_for_input_processing+0x20c>)
 8000310:	6013      	str	r3, [r2, #0]
			}
			break ;
 8000312:	e043      	b.n	800039c <fsm_for_input_processing+0x1dc>
		case STATE_4 :
			// Display 2 green LEDS , LED7 - SEG for mode and LED7_SEG for value
			HAL_GPIO_WritePin ( GPIOA , GREEN_1_Pin | GREEN_2_Pin , GPIO_PIN_RESET ) ;
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 6108 	mov.w	r1, #2176	; 0x880
 800031a:	4826      	ldr	r0, [pc, #152]	; (80003b4 <fsm_for_input_processing+0x1f4>)
 800031c:	f001 f96d 	bl	80015fa <HAL_GPIO_WritePin>
			if( timer_MODE_flag == 1) {
 8000320:	4b25      	ldr	r3, [pc, #148]	; (80003b8 <fsm_for_input_processing+0x1f8>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d112      	bne.n	800034e <fsm_for_input_processing+0x18e>
				update7SEG_VALUE ( index_mode , green_temp ) ;
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <fsm_for_input_processing+0x1fc>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a27      	ldr	r2, [pc, #156]	; (80003cc <fsm_for_input_processing+0x20c>)
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	4611      	mov	r1, r2
 8000332:	4618      	mov	r0, r3
 8000334:	f000 fabc 	bl	80008b0 <update7SEG_VALUE>
				update7SEG_MODE ( index_mode , 4) ;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <fsm_for_input_processing+0x1fc>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2104      	movs	r1, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f000 fa70 	bl	8000824 <update7SEG_MODE>
				index_mode ++;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <fsm_for_input_processing+0x1fc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <fsm_for_input_processing+0x1fc>)
 800034c:	6013      	str	r3, [r2, #0]
			}
			// When button 2 is pressed , green light valu temporarily increased by 1 in a range of 1 -99
			if( is_button_pressed ( PRESS_BUTTON_2 ) == 1) {
 800034e:	2001      	movs	r0, #1
 8000350:	f000 f8fa 	bl	8000548 <is_button_pressed>
 8000354:	4603      	mov	r3, r0
 8000356:	2b01      	cmp	r3, #1
 8000358:	d104      	bne.n	8000364 <fsm_for_input_processing+0x1a4>
				green_temp += 1;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <fsm_for_input_processing+0x20c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	4a1a      	ldr	r2, [pc, #104]	; (80003cc <fsm_for_input_processing+0x20c>)
 8000362:	6013      	str	r3, [r2, #0]
			}
			// When button 3 is pressed , set temporary green light value to green light value
			if( is_button_pressed ( PRESS_BUTTON_3 ) == 1) {
 8000364:	2002      	movs	r0, #2
 8000366:	f000 f8ef 	bl	8000548 <is_button_pressed>
 800036a:	4603      	mov	r3, r0
 800036c:	2b01      	cmp	r3, #1
 800036e:	d103      	bne.n	8000378 <fsm_for_input_processing+0x1b8>
				green_timer = green_temp ;
 8000370:	4b16      	ldr	r3, [pc, #88]	; (80003cc <fsm_for_input_processing+0x20c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <fsm_for_input_processing+0x208>)
 8000376:	6013      	str	r3, [r2, #0]
			}
			// When button 1 is pressed , go to the next state
			if( is_button_pressed ( PRESS_BUTTON_1 ) == 1) {
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f8e5 	bl	8000548 <is_button_pressed>
 800037e:	4603      	mov	r3, r0
 8000380:	2b01      	cmp	r3, #1
 8000382:	d10d      	bne.n	80003a0 <fsm_for_input_processing+0x1e0>
				clearLED () ;
 8000384:	f000 f900 	bl	8000588 <clearLED>
				buttonState = STATE_1 ;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <fsm_for_input_processing+0x1e8>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
			}
			break ;
 800038e:	e007      	b.n	80003a0 <fsm_for_input_processing+0x1e0>
		default :
			break ;
 8000390:	bf00      	nop
 8000392:	e006      	b.n	80003a2 <fsm_for_input_processing+0x1e2>
			break ;
 8000394:	bf00      	nop
 8000396:	e004      	b.n	80003a2 <fsm_for_input_processing+0x1e2>
			break ;
 8000398:	bf00      	nop
 800039a:	e002      	b.n	80003a2 <fsm_for_input_processing+0x1e2>
			break ;
 800039c:	bf00      	nop
 800039e:	e000      	b.n	80003a2 <fsm_for_input_processing+0x1e2>
			break ;
 80003a0:	bf00      	nop
	}
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000028 	.word	0x20000028
 80003ac:	2000005c 	.word	0x2000005c
 80003b0:	20000060 	.word	0x20000060
 80003b4:	40010800 	.word	0x40010800
 80003b8:	20000068 	.word	0x20000068
 80003bc:	20000040 	.word	0x20000040
 80003c0:	20000050 	.word	0x20000050
 80003c4:	20000064 	.word	0x20000064
 80003c8:	20000054 	.word	0x20000054
 80003cc:	20000074 	.word	0x20000074

080003d0 <clear_button>:
// we define two buffers for debouncing
static GPIO_PinState debounceButtonBuffer1 [ N0_OF_BUTTONS ];
static GPIO_PinState debounceButtonBuffer2 [ N0_OF_BUTTONS ];
// we define counter for checking the button is pressed
static uint16_t counterForButtonPress [ N0_OF_BUTTONS ];
void clear_button () {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS ; i ++) {
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	e011      	b.n	8000400 <clear_button+0x30>
		debounceButtonBuffer1 [ i ] = GPIO_PIN_SET ; // No press
 80003dc:	4a15      	ldr	r2, [pc, #84]	; (8000434 <clear_button+0x64>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2 [ i ] = GPIO_PIN_SET ; // No press
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <clear_button+0x68>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4413      	add	r3, r2
 80003ec:	2201      	movs	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
		buttonBuffer [ i] = GPIO_PIN_SET ; // No press
 80003f0:	4a12      	ldr	r2, [pc, #72]	; (800043c <clear_button+0x6c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS ; i ++) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3301      	adds	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b02      	cmp	r3, #2
 8000404:	ddea      	ble.n	80003dc <clear_button+0xc>
	}
	HAL_GPIO_WritePin ( BUTTON_1_GPIO_Port , BUTTON_1_Pin , 1) ;
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <clear_button+0x70>)
 800040e:	f001 f8f4 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( BUTTON_2_GPIO_Port , BUTTON_2_Pin , 1) ;
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000418:	4809      	ldr	r0, [pc, #36]	; (8000440 <clear_button+0x70>)
 800041a:	f001 f8ee 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( BUTTON_3_GPIO_Port , BUTTON_3_Pin , 1) ;
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000424:	4806      	ldr	r0, [pc, #24]	; (8000440 <clear_button+0x70>)
 8000426:	f001 f8e8 	bl	80015fa <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000030 	.word	0x20000030
 8000438:	20000034 	.word	0x20000034
 800043c:	2000002c 	.word	0x2000002c
 8000440:	40010800 	.word	0x40010800

08000444 <button_reading>:

void button_reading ( void ) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS ; i ++) {
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	e069      	b.n	8000524 <button_reading+0xe0>
		debounceButtonBuffer2 [ i ] = debounceButtonBuffer1 [ i ];
 8000450:	4a38      	ldr	r2, [pc, #224]	; (8000534 <button_reading+0xf0>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	7819      	ldrb	r1, [r3, #0]
 8000458:	4a37      	ldr	r2, [pc, #220]	; (8000538 <button_reading+0xf4>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	460a      	mov	r2, r1
 8000460:	701a      	strb	r2, [r3, #0]
		// Catch signal every time the corresponding button is pressed
		if(i == 0)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d10c      	bne.n	8000482 <button_reading+0x3e>
			debounceButtonBuffer1 [ i ] = HAL_GPIO_ReadPin ( BUTTON_1_GPIO_Port , BUTTON_1_Pin ) ;
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4833      	ldr	r0, [pc, #204]	; (800053c <button_reading+0xf8>)
 800046e:	f001 f8ad 	bl	80015cc <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	4619      	mov	r1, r3
 8000476:	4a2f      	ldr	r2, [pc, #188]	; (8000534 <button_reading+0xf0>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4413      	add	r3, r2
 800047c:	460a      	mov	r2, r1
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	e01e      	b.n	80004c0 <button_reading+0x7c>
		else if ( i == 1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10c      	bne.n	80004a2 <button_reading+0x5e>
			debounceButtonBuffer1 [ i ] = HAL_GPIO_ReadPin ( BUTTON_2_GPIO_Port , BUTTON_2_Pin ) ;
 8000488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048c:	482b      	ldr	r0, [pc, #172]	; (800053c <button_reading+0xf8>)
 800048e:	f001 f89d 	bl	80015cc <HAL_GPIO_ReadPin>
 8000492:	4603      	mov	r3, r0
 8000494:	4619      	mov	r1, r3
 8000496:	4a27      	ldr	r2, [pc, #156]	; (8000534 <button_reading+0xf0>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	460a      	mov	r2, r1
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	e00e      	b.n	80004c0 <button_reading+0x7c>
		else if ( i == 2)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d10b      	bne.n	80004c0 <button_reading+0x7c>
			debounceButtonBuffer1 [ i ] = HAL_GPIO_ReadPin ( BUTTON_3_GPIO_Port , BUTTON_3_Pin ) ;
 80004a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ac:	4823      	ldr	r0, [pc, #140]	; (800053c <button_reading+0xf8>)
 80004ae:	f001 f88d 	bl	80015cc <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	4619      	mov	r1, r3
 80004b6:	4a1f      	ldr	r2, [pc, #124]	; (8000534 <button_reading+0xf0>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4413      	add	r3, r2
 80004bc:	460a      	mov	r2, r1
 80004be:	701a      	strb	r2, [r3, #0]

		if( debounceButtonBuffer1 [ i ] == debounceButtonBuffer2 [ i ]) {
 80004c0:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <button_reading+0xf0>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	491b      	ldr	r1, [pc, #108]	; (8000538 <button_reading+0xf4>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	440b      	add	r3, r1
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d124      	bne.n	800051e <button_reading+0xda>
			buttonBuffer [ i ] = debounceButtonBuffer1 [ i ];
 80004d4:	4a17      	ldr	r2, [pc, #92]	; (8000534 <button_reading+0xf0>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	7819      	ldrb	r1, [r3, #0]
 80004dc:	4a18      	ldr	r2, [pc, #96]	; (8000540 <button_reading+0xfc>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	460a      	mov	r2, r1
 80004e4:	701a      	strb	r2, [r3, #0]
			if( buttonBuffer [ i ] == BUTTON_IS_PRESSED ) {
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <button_reading+0xfc>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d110      	bne.n	8000514 <button_reading+0xd0>
				// If a button is pressed , we start counting
				if( counterForButtonPress [ i ] < DURATION_FOR_AUTO_INCREASING ) {
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <button_reading+0x100>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004fa:	2b63      	cmp	r3, #99	; 0x63
 80004fc:	d80f      	bhi.n	800051e <button_reading+0xda>
					counterForButtonPress [ i ]++;
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <button_reading+0x100>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000506:	3301      	adds	r3, #1
 8000508:	b299      	uxth	r1, r3
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <button_reading+0x100>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000512:	e004      	b.n	800051e <button_reading+0xda>
				}
			} else {
				counterForButtonPress [ i ] = 0;
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <button_reading+0x100>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2100      	movs	r1, #0
 800051a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < N0_OF_BUTTONS ; i ++) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3301      	adds	r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b02      	cmp	r3, #2
 8000528:	dd92      	ble.n	8000450 <button_reading+0xc>
			}
		}
	}
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000030 	.word	0x20000030
 8000538:	20000034 	.word	0x20000034
 800053c:	40010800 	.word	0x40010800
 8000540:	2000002c 	.word	0x2000002c
 8000544:	20000038 	.word	0x20000038

08000548 <is_button_pressed>:

unsigned char is_button_pressed ( uint8_t index ) {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d901      	bls.n	800055c <is_button_pressed+0x14>
 8000558:	2300      	movs	r3, #0
 800055a:	e00b      	b.n	8000574 <is_button_pressed+0x2c>
	if ( buttonBuffer [ index ] == BUTTON_IS_PRESSED ) {
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <is_button_pressed+0x38>)
 8000560:	5cd3      	ldrb	r3, [r2, r3]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d105      	bne.n	8000572 <is_button_pressed+0x2a>
		return counterForButtonPress [ index ];
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <is_button_pressed+0x3c>)
 800056a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	e000      	b.n	8000574 <is_button_pressed+0x2c>
	}
	return 0;
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	2000002c 	.word	0x2000002c
 8000584:	20000038 	.word	0x20000038

08000588 <clearLED>:
#include "led_display.h"
#include "main.h"
#include "global.h"

void clearLED() {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_1_Pin | LED7_2_Pin| LED7_3_Pin | LED7_4_Pin | LED7_5_Pin | LED7_6_Pin, 1) ;
 800058c:	2201      	movs	r2, #1
 800058e:	217f      	movs	r1, #127	; 0x7f
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <clearLED+0x34>)
 8000592:	f001 f832 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED7_00_Pin | LED7_11_Pin | LED7_22_Pin | LED7_33_Pin | LED7_44_Pin | LED7_55_Pin | LED7_66_Pin, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <clearLED+0x34>)
 800059e:	f001 f82c 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RED_1_Pin | YELLOW_1_Pin | GREEN_1_Pin | RED_2_Pin | YELLOW_2_Pin | GREEN_2_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 616e 	mov.w	r1, #3808	; 0xee0
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <clearLED+0x38>)
 80005aa:	f001 f826 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_MODE_00_Pin | EN_MODE_11_Pin | EN_VALUE_0_Pin | EN_VALUE_1_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	211e      	movs	r1, #30
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <clearLED+0x38>)
 80005b4:	f001 f821 	bl	80015fa <HAL_GPIO_WritePin>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	40010800 	.word	0x40010800

080005c4 <display7SEG_VALUE>:

void display7SEG_VALUE(int num) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b09      	cmp	r3, #9
 80005d0:	d87f      	bhi.n	80006d2 <display7SEG_VALUE+0x10e>
 80005d2:	a201      	add	r2, pc, #4	; (adr r2, 80005d8 <display7SEG_VALUE+0x14>)
 80005d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d8:	08000601 	.word	0x08000601
 80005dc:	08000617 	.word	0x08000617
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	08000643 	.word	0x08000643
 80005e8:	08000659 	.word	0x08000659
 80005ec:	0800066f 	.word	0x0800066f
 80005f0:	08000685 	.word	0x08000685
 80005f4:	0800069b 	.word	0x0800069b
 80005f8:	080006b1 	.word	0x080006b1
 80005fc:	080006bd 	.word	0x080006bd
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_1_Pin | LED7_2_Pin | LED7_3_Pin | LED7_4_Pin | LED7_5_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	213f      	movs	r1, #63	; 0x3f
 8000604:	4835      	ldr	r0, [pc, #212]	; (80006dc <display7SEG_VALUE+0x118>)
 8000606:	f000 fff8 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_6_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	4833      	ldr	r0, [pc, #204]	; (80006dc <display7SEG_VALUE+0x118>)
 8000610:	f000 fff3 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 8000614:	e05d      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, LED7_1_Pin | LED7_2_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2106      	movs	r1, #6
 800061a:	4830      	ldr	r0, [pc, #192]	; (80006dc <display7SEG_VALUE+0x118>)
 800061c:	f000 ffed 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_3_Pin | LED7_4_Pin | LED7_5_Pin | LED7_6_Pin, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	2179      	movs	r1, #121	; 0x79
 8000624:	482d      	ldr	r0, [pc, #180]	; (80006dc <display7SEG_VALUE+0x118>)
 8000626:	f000 ffe8 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 800062a:	e052      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_1_Pin | LED7_3_Pin | LED7_4_Pin | LED7_6_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	215b      	movs	r1, #91	; 0x5b
 8000630:	482a      	ldr	r0, [pc, #168]	; (80006dc <display7SEG_VALUE+0x118>)
 8000632:	f000 ffe2 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_2_Pin | LED7_5_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2124      	movs	r1, #36	; 0x24
 800063a:	4828      	ldr	r0, [pc, #160]	; (80006dc <display7SEG_VALUE+0x118>)
 800063c:	f000 ffdd 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 8000640:	e047      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_1_Pin | LED7_2_Pin | LED7_3_Pin | LED7_6_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	214f      	movs	r1, #79	; 0x4f
 8000646:	4825      	ldr	r0, [pc, #148]	; (80006dc <display7SEG_VALUE+0x118>)
 8000648:	f000 ffd7 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_4_Pin | LED7_5_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2130      	movs	r1, #48	; 0x30
 8000650:	4822      	ldr	r0, [pc, #136]	; (80006dc <display7SEG_VALUE+0x118>)
 8000652:	f000 ffd2 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 8000656:	e03c      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 4:
		HAL_GPIO_WritePin(GPIOB, LED7_1_Pin | LED7_2_Pin | LED7_5_Pin | LED7_6_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2166      	movs	r1, #102	; 0x66
 800065c:	481f      	ldr	r0, [pc, #124]	; (80006dc <display7SEG_VALUE+0x118>)
 800065e:	f000 ffcc 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_3_Pin | LED7_4_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2119      	movs	r1, #25
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <display7SEG_VALUE+0x118>)
 8000668:	f000 ffc7 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 800066c:	e031      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_2_Pin | LED7_3_Pin | LED7_5_Pin | LED7_6_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	216d      	movs	r1, #109	; 0x6d
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <display7SEG_VALUE+0x118>)
 8000674:	f000 ffc1 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_1_Pin | LED7_4_Pin ,GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2112      	movs	r1, #18
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <display7SEG_VALUE+0x118>)
 800067e:	f000 ffbc 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 8000682:	e026      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, LED7_0_Pin | LED7_2_Pin | LED7_3_Pin | LED7_4_Pin | LED7_5_Pin | LED7_6_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	217d      	movs	r1, #125	; 0x7d
 8000688:	4814      	ldr	r0, [pc, #80]	; (80006dc <display7SEG_VALUE+0x118>)
 800068a:	f000 ffb6 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7_1_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2102      	movs	r1, #2
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <display7SEG_VALUE+0x118>)
 8000694:	f000 ffb1 	bl	80015fa <HAL_GPIO_WritePin>
		break;
 8000698:	e01b      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 7:
		HAL_GPIO_WritePin ( GPIOB , LED7_0_Pin | LED7_1_Pin | LED7_2_Pin , GPIO_PIN_RESET ) ;
 800069a:	2200      	movs	r2, #0
 800069c:	2107      	movs	r1, #7
 800069e:	480f      	ldr	r0, [pc, #60]	; (80006dc <display7SEG_VALUE+0x118>)
 80006a0:	f000 ffab 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_3_Pin | LED7_4_Pin | LED7_5_Pin | LED7_6_Pin , GPIO_PIN_SET ) ;
 80006a4:	2201      	movs	r2, #1
 80006a6:	2178      	movs	r1, #120	; 0x78
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <display7SEG_VALUE+0x118>)
 80006aa:	f000 ffa6 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80006ae:	e010      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 8:
		HAL_GPIO_WritePin ( GPIOB , LED7_0_Pin | LED7_1_Pin | LED7_2_Pin | LED7_3_Pin | LED7_4_Pin | LED7_5_Pin | LED7_6_Pin ,GPIO_PIN_RESET ) ;
 80006b0:	2200      	movs	r2, #0
 80006b2:	217f      	movs	r1, #127	; 0x7f
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <display7SEG_VALUE+0x118>)
 80006b6:	f000 ffa0 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80006ba:	e00a      	b.n	80006d2 <display7SEG_VALUE+0x10e>
	case 9:
		HAL_GPIO_WritePin ( GPIOB , LED7_0_Pin | LED7_1_Pin | LED7_2_Pin | LED7_3_Pin | LED7_5_Pin | LED7_6_Pin ,GPIO_PIN_RESET ) ;
 80006bc:	2200      	movs	r2, #0
 80006be:	216f      	movs	r1, #111	; 0x6f
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <display7SEG_VALUE+0x118>)
 80006c2:	f000 ff9a 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_4_Pin , GPIO_PIN_SET ) ;
 80006c6:	2201      	movs	r2, #1
 80006c8:	2110      	movs	r1, #16
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <display7SEG_VALUE+0x118>)
 80006cc:	f000 ff95 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80006d0:	bf00      	nop
	}
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <display7SEG_MODE>:

void display7SEG_MODE (int num ) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b09      	cmp	r3, #9
 80006ec:	f200 8094 	bhi.w	8000818 <display7SEG_MODE+0x138>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <display7SEG_MODE+0x18>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	08000721 	.word	0x08000721
 80006fc:	0800073b 	.word	0x0800073b
 8000700:	08000755 	.word	0x08000755
 8000704:	0800076f 	.word	0x0800076f
 8000708:	08000789 	.word	0x08000789
 800070c:	080007a3 	.word	0x080007a3
 8000710:	080007bd 	.word	0x080007bd
 8000714:	080007d7 	.word	0x080007d7
 8000718:	080007f1 	.word	0x080007f1
 800071c:	080007ff 	.word	0x080007ff
	switch ( num ) {
	case 0:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_11_Pin | LED7_22_Pin | LED7_33_Pin | LED7_44_Pin | LED7_55_Pin ,GPIO_PIN_RESET ) ;
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000726:	483e      	ldr	r0, [pc, #248]	; (8000820 <display7SEG_MODE+0x140>)
 8000728:	f000 ff67 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_66_Pin , GPIO_PIN_SET ) ;
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	483b      	ldr	r0, [pc, #236]	; (8000820 <display7SEG_MODE+0x140>)
 8000734:	f000 ff61 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 8000738:	e06e      	b.n	8000818 <display7SEG_MODE+0x138>
	case 1:
		HAL_GPIO_WritePin ( GPIOB , LED7_11_Pin | LED7_22_Pin ,GPIO_PIN_RESET ) ;
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000740:	4837      	ldr	r0, [pc, #220]	; (8000820 <display7SEG_MODE+0x140>)
 8000742:	f000 ff5a 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_33_Pin |LED7_44_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_SET ) ;
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 800074c:	4834      	ldr	r0, [pc, #208]	; (8000820 <display7SEG_MODE+0x140>)
 800074e:	f000 ff54 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 8000752:	e061      	b.n	8000818 <display7SEG_MODE+0x138>
	case 2:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_11_Pin | LED7_33_Pin | LED7_44_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 800075a:	4831      	ldr	r0, [pc, #196]	; (8000820 <display7SEG_MODE+0x140>)
 800075c:	f000 ff4d 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_22_Pin | LED7_55_Pin ,GPIO_PIN_SET ) ;
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000766:	482e      	ldr	r0, [pc, #184]	; (8000820 <display7SEG_MODE+0x140>)
 8000768:	f000 ff47 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 800076c:	e054      	b.n	8000818 <display7SEG_MODE+0x138>
	case 3:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_11_Pin |LED7_22_Pin | LED7_33_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 8000774:	482a      	ldr	r0, [pc, #168]	; (8000820 <display7SEG_MODE+0x140>)
 8000776:	f000 ff40 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_44_Pin | LED7_55_Pin , GPIO_PIN_SET ) ;
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000780:	4827      	ldr	r0, [pc, #156]	; (8000820 <display7SEG_MODE+0x140>)
 8000782:	f000 ff3a 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 8000786:	e047      	b.n	8000818 <display7SEG_MODE+0x138>
	case 4:
		HAL_GPIO_WritePin ( GPIOB , LED7_11_Pin | LED7_22_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 800078e:	4824      	ldr	r0, [pc, #144]	; (8000820 <display7SEG_MODE+0x140>)
 8000790:	f000 ff33 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_33_Pin | LED7_44_Pin , GPIO_PIN_SET ) ;
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800079a:	4821      	ldr	r0, [pc, #132]	; (8000820 <display7SEG_MODE+0x140>)
 800079c:	f000 ff2d 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80007a0:	e03a      	b.n	8000818 <display7SEG_MODE+0x138>
	case 5:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_22_Pin | LED7_33_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 80007a8:	481d      	ldr	r0, [pc, #116]	; (8000820 <display7SEG_MODE+0x140>)
 80007aa:	f000 ff26 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_11_Pin | LED7_44_Pin , GPIO_PIN_SET ) ;
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80007b4:	481a      	ldr	r0, [pc, #104]	; (8000820 <display7SEG_MODE+0x140>)
 80007b6:	f000 ff20 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80007ba:	e02d      	b.n	8000818 <display7SEG_MODE+0x138>
	case 6:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_22_Pin | LED7_33_Pin | LED7_44_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80007c2:	4817      	ldr	r0, [pc, #92]	; (8000820 <display7SEG_MODE+0x140>)
 80007c4:	f000 ff19 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_11_Pin , GPIO_PIN_SET ) ;
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <display7SEG_MODE+0x140>)
 80007d0:	f000 ff13 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80007d4:	e020      	b.n	8000818 <display7SEG_MODE+0x138>
	case 7:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_11_Pin | LED7_22_Pin , GPIO_PIN_RESET ) ;
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <display7SEG_MODE+0x140>)
 80007de:	f000 ff0c 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_33_Pin | LED7_44_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_SET ) ;
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <display7SEG_MODE+0x140>)
 80007ea:	f000 ff06 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80007ee:	e013      	b.n	8000818 <display7SEG_MODE+0x138>
	case 8:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_11_Pin | LED7_22_Pin | LED7_33_Pin | LED7_44_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <display7SEG_MODE+0x140>)
 80007f8:	f000 feff 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 80007fc:	e00c      	b.n	8000818 <display7SEG_MODE+0x138>
	case 9:
		HAL_GPIO_WritePin ( GPIOB , LED7_00_Pin | LED7_11_Pin | LED7_22_Pin | LED7_33_Pin | LED7_55_Pin | LED7_66_Pin , GPIO_PIN_RESET ) ;
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <display7SEG_MODE+0x140>)
 8000806:	f000 fef8 	bl	80015fa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GPIOB , LED7_44_Pin , GPIO_PIN_SET ) ;
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <display7SEG_MODE+0x140>)
 8000812:	f000 fef2 	bl	80015fa <HAL_GPIO_WritePin>
		break ;
 8000816:	bf00      	nop
	}
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010c00 	.word	0x40010c00

08000824 <update7SEG_MODE>:


// LED 7 SEG - MODE
// Display Mode LED
void update7SEG_MODE (int index , int value ) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	int donvi = value % 10;
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <update7SEG_MODE+0x84>)
 8000832:	fb83 1302 	smull	r1, r3, r3, r2
 8000836:	1099      	asrs	r1, r3, #2
 8000838:	17d3      	asrs	r3, r2, #31
 800083a:	1ac9      	subs	r1, r1, r3
 800083c:	460b      	mov	r3, r1
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	440b      	add	r3, r1
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	60fb      	str	r3, [r7, #12]
	int chuc = value / 10;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <update7SEG_MODE+0x84>)
 800084c:	fb82 1203 	smull	r1, r2, r2, r3
 8000850:	1092      	asrs	r2, r2, #2
 8000852:	17db      	asrs	r3, r3, #31
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	60bb      	str	r3, [r7, #8]
	switch ( index ) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <update7SEG_MODE+0x42>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d00e      	beq.n	8000882 <update7SEG_MODE+0x5e>
			HAL_GPIO_WritePin ( EN_MODE_00_GPIO_Port , EN_MODE_00_Pin ,1) ;
			HAL_GPIO_WritePin ( EN_MODE_11_GPIO_Port , EN_MODE_11_Pin ,0) ;
			display7SEG_MODE ( donvi ) ;
			break ;
		default :
			break ;
 8000864:	e01b      	b.n	800089e <update7SEG_MODE+0x7a>
			HAL_GPIO_WritePin ( EN_MODE_00_GPIO_Port , EN_MODE_00_Pin ,0) ;
 8000866:	2200      	movs	r2, #0
 8000868:	2102      	movs	r1, #2
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <update7SEG_MODE+0x88>)
 800086c:	f000 fec5 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN_MODE_11_GPIO_Port , EN_MODE_11_Pin ,1) ;
 8000870:	2201      	movs	r2, #1
 8000872:	2104      	movs	r1, #4
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <update7SEG_MODE+0x88>)
 8000876:	f000 fec0 	bl	80015fa <HAL_GPIO_WritePin>
			display7SEG_MODE ( chuc );
 800087a:	68b8      	ldr	r0, [r7, #8]
 800087c:	f7ff ff30 	bl	80006e0 <display7SEG_MODE>
			break ;
 8000880:	e00d      	b.n	800089e <update7SEG_MODE+0x7a>
			HAL_GPIO_WritePin ( EN_MODE_00_GPIO_Port , EN_MODE_00_Pin ,1) ;
 8000882:	2201      	movs	r2, #1
 8000884:	2102      	movs	r1, #2
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <update7SEG_MODE+0x88>)
 8000888:	f000 feb7 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN_MODE_11_GPIO_Port , EN_MODE_11_Pin ,0) ;
 800088c:	2200      	movs	r2, #0
 800088e:	2104      	movs	r1, #4
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <update7SEG_MODE+0x88>)
 8000892:	f000 feb2 	bl	80015fa <HAL_GPIO_WritePin>
			display7SEG_MODE ( donvi ) ;
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff ff22 	bl	80006e0 <display7SEG_MODE>
			break ;
 800089c:	bf00      	nop
		}
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	66666667 	.word	0x66666667
 80008ac:	40010800 	.word	0x40010800

080008b0 <update7SEG_VALUE>:

// LED 7 SEG - VALUE
// Display Value LED
void update7SEG_VALUE (int index , int value ) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	int donvi = value % 10;
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <update7SEG_VALUE+0x84>)
 80008be:	fb83 1302 	smull	r1, r3, r3, r2
 80008c2:	1099      	asrs	r1, r3, #2
 80008c4:	17d3      	asrs	r3, r2, #31
 80008c6:	1ac9      	subs	r1, r1, r3
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]
	int chuc = value / 10;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <update7SEG_VALUE+0x84>)
 80008d8:	fb82 1203 	smull	r1, r2, r2, r3
 80008dc:	1092      	asrs	r2, r2, #2
 80008de:	17db      	asrs	r3, r3, #31
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	60bb      	str	r3, [r7, #8]
	switch ( index ) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <update7SEG_VALUE+0x42>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00e      	beq.n	800090e <update7SEG_VALUE+0x5e>
			HAL_GPIO_WritePin ( EN_VALUE_0_GPIO_Port , EN_VALUE_0_Pin ,1) ;
			HAL_GPIO_WritePin ( EN_VALUE_1_GPIO_Port , EN_VALUE_1_Pin ,0) ;
			display7SEG_VALUE ( donvi ) ;
			break ;
		default :
			break ;
 80008f0:	e01b      	b.n	800092a <update7SEG_VALUE+0x7a>
			HAL_GPIO_WritePin ( EN_VALUE_0_GPIO_Port , EN_VALUE_0_Pin ,0) ;
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	4810      	ldr	r0, [pc, #64]	; (8000938 <update7SEG_VALUE+0x88>)
 80008f8:	f000 fe7f 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN_VALUE_1_GPIO_Port , EN_VALUE_1_Pin ,1) ;
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <update7SEG_VALUE+0x88>)
 8000902:	f000 fe7a 	bl	80015fa <HAL_GPIO_WritePin>
			display7SEG_VALUE ( chuc ) ;
 8000906:	68b8      	ldr	r0, [r7, #8]
 8000908:	f7ff fe5c 	bl	80005c4 <display7SEG_VALUE>
			break ;
 800090c:	e00d      	b.n	800092a <update7SEG_VALUE+0x7a>
			HAL_GPIO_WritePin ( EN_VALUE_0_GPIO_Port , EN_VALUE_0_Pin ,1) ;
 800090e:	2201      	movs	r2, #1
 8000910:	2108      	movs	r1, #8
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <update7SEG_VALUE+0x88>)
 8000914:	f000 fe71 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN_VALUE_1_GPIO_Port , EN_VALUE_1_Pin ,0) ;
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <update7SEG_VALUE+0x88>)
 800091e:	f000 fe6c 	bl	80015fa <HAL_GPIO_WritePin>
			display7SEG_VALUE ( donvi ) ;
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff fe4e 	bl	80005c4 <display7SEG_VALUE>
			break ;
 8000928:	bf00      	nop
		}
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	66666667 	.word	0x66666667
 8000938:	40010800 	.word	0x40010800

0800093c <mode1_normal>:

// MODE_1 Normal
// Variable is initialized in global .c
void mode1_normal () {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	if( counter_mode1 == 0) {
 8000940:	4b7b      	ldr	r3, [pc, #492]	; (8000b30 <mode1_normal+0x1f4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 80c5 	bne.w	8000ad4 <mode1_normal+0x198>
		counter_mode1 = 100;
 800094a:	4b79      	ldr	r3, [pc, #484]	; (8000b30 <mode1_normal+0x1f4>)
 800094c:	2264      	movs	r2, #100	; 0x64
 800094e:	601a      	str	r2, [r3, #0]
		if( counter == red_timer + green_timer + yellow_timer ) {
 8000950:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <mode1_normal+0x1f8>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b78      	ldr	r3, [pc, #480]	; (8000b38 <mode1_normal+0x1fc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	441a      	add	r2, r3
 800095a:	4b78      	ldr	r3, [pc, #480]	; (8000b3c <mode1_normal+0x200>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	441a      	add	r2, r3
 8000960:	4b77      	ldr	r3, [pc, #476]	; (8000b40 <mode1_normal+0x204>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d128      	bne.n	80009ba <mode1_normal+0x7e>
		// Led 1 RED
			display_1 = red_timer ;
 8000968:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <mode1_normal+0x1f8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a75      	ldr	r2, [pc, #468]	; (8000b44 <mode1_normal+0x208>)
 800096e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin ,GPIO_PIN_RESET ) ;
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	4874      	ldr	r0, [pc, #464]	; (8000b48 <mode1_normal+0x20c>)
 8000976:	f000 fe40 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin ,GPIO_PIN_SET ) ;
 800097a:	2201      	movs	r2, #1
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4872      	ldr	r0, [pc, #456]	; (8000b48 <mode1_normal+0x20c>)
 8000980:	f000 fe3b 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin ,GPIO_PIN_SET ) ;
 8000984:	2201      	movs	r2, #1
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	486f      	ldr	r0, [pc, #444]	; (8000b48 <mode1_normal+0x20c>)
 800098a:	f000 fe36 	bl	80015fa <HAL_GPIO_WritePin>
		// Led 2 GREEN
			display_2 = green_timer ;
 800098e:	4b6a      	ldr	r3, [pc, #424]	; (8000b38 <mode1_normal+0x1fc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a6e      	ldr	r2, [pc, #440]	; (8000b4c <mode1_normal+0x210>)
 8000994:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin ( RED_2_GPIO_Port , RED_2_Pin ,GPIO_PIN_SET ) ;
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099c:	486a      	ldr	r0, [pc, #424]	; (8000b48 <mode1_normal+0x20c>)
 800099e:	f000 fe2c 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( YELLOW_2_GPIO_Port , YELLOW_2_Pin ,GPIO_PIN_SET ) ;
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a8:	4867      	ldr	r0, [pc, #412]	; (8000b48 <mode1_normal+0x20c>)
 80009aa:	f000 fe26 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( GREEN_2_GPIO_Port , GREEN_2_Pin ,GPIO_PIN_RESET ) ;
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b4:	4864      	ldr	r0, [pc, #400]	; (8000b48 <mode1_normal+0x20c>)
 80009b6:	f000 fe20 	bl	80015fa <HAL_GPIO_WritePin>
		}
		if( counter == ( red_timer + yellow_timer ) ) {
 80009ba:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <mode1_normal+0x1f8>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b5f      	ldr	r3, [pc, #380]	; (8000b3c <mode1_normal+0x200>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	441a      	add	r2, r3
 80009c4:	4b5e      	ldr	r3, [pc, #376]	; (8000b40 <mode1_normal+0x204>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d115      	bne.n	80009f8 <mode1_normal+0xbc>
		// Led 2 YELLOW
			display_2 = yellow_timer ;
 80009cc:	4b5b      	ldr	r3, [pc, #364]	; (8000b3c <mode1_normal+0x200>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a5e      	ldr	r2, [pc, #376]	; (8000b4c <mode1_normal+0x210>)
 80009d2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin ( RED_2_GPIO_Port , RED_2_Pin ,GPIO_PIN_SET ) ;
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009da:	485b      	ldr	r0, [pc, #364]	; (8000b48 <mode1_normal+0x20c>)
 80009dc:	f000 fe0d 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( YELLOW_2_GPIO_Port , YELLOW_2_Pin ,GPIO_PIN_RESET ) ;
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	4858      	ldr	r0, [pc, #352]	; (8000b48 <mode1_normal+0x20c>)
 80009e8:	f000 fe07 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( GREEN_2_GPIO_Port , GREEN_2_Pin ,GPIO_PIN_SET ) ;
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4855      	ldr	r0, [pc, #340]	; (8000b48 <mode1_normal+0x20c>)
 80009f4:	f000 fe01 	bl	80015fa <HAL_GPIO_WritePin>
		}
		if ( counter == ( yellow_timer + green_timer ) ) {
 80009f8:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <mode1_normal+0x200>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <mode1_normal+0x1fc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	441a      	add	r2, r3
 8000a02:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <mode1_normal+0x204>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d112      	bne.n	8000a30 <mode1_normal+0xf4>
		// Led 1 GREEN
			display_1 = green_timer ;
 8000a0a:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <mode1_normal+0x1fc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a4d      	ldr	r2, [pc, #308]	; (8000b44 <mode1_normal+0x208>)
 8000a10:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin ,GPIO_PIN_SET ) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	2120      	movs	r1, #32
 8000a16:	484c      	ldr	r0, [pc, #304]	; (8000b48 <mode1_normal+0x20c>)
 8000a18:	f000 fdef 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin ,GPIO_PIN_SET ) ;
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	4849      	ldr	r0, [pc, #292]	; (8000b48 <mode1_normal+0x20c>)
 8000a22:	f000 fdea 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin ,GPIO_PIN_RESET ) ;
 8000a26:	2200      	movs	r2, #0
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	4847      	ldr	r0, [pc, #284]	; (8000b48 <mode1_normal+0x20c>)
 8000a2c:	f000 fde5 	bl	80015fa <HAL_GPIO_WritePin>
		}
		if ( counter == red_timer ) {
 8000a30:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <mode1_normal+0x204>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <mode1_normal+0x1f8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d115      	bne.n	8000a68 <mode1_normal+0x12c>
		// Led 2 RED
			display_2 = red_timer ;
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	; (8000b34 <mode1_normal+0x1f8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <mode1_normal+0x210>)
 8000a42:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin ( RED_2_GPIO_Port , RED_2_Pin ,GPIO_PIN_RESET ) ;
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4a:	483f      	ldr	r0, [pc, #252]	; (8000b48 <mode1_normal+0x20c>)
 8000a4c:	f000 fdd5 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( YELLOW_2_GPIO_Port , YELLOW_2_Pin ,GPIO_PIN_SET ) ;
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a56:	483c      	ldr	r0, [pc, #240]	; (8000b48 <mode1_normal+0x20c>)
 8000a58:	f000 fdcf 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( GREEN_2_GPIO_Port , GREEN_2_Pin ,GPIO_PIN_SET ) ;
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4839      	ldr	r0, [pc, #228]	; (8000b48 <mode1_normal+0x20c>)
 8000a64:	f000 fdc9 	bl	80015fa <HAL_GPIO_WritePin>
		}
		if ( counter == yellow_timer ) {
 8000a68:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <mode1_normal+0x204>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <mode1_normal+0x200>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d112      	bne.n	8000a9a <mode1_normal+0x15e>
		// Led 1 YELLOW
			display_1 = yellow_timer ;
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <mode1_normal+0x200>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <mode1_normal+0x208>)
 8000a7a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin ( RED_1_GPIO_Port , RED_1_Pin ,GPIO_PIN_SET ) ;
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4831      	ldr	r0, [pc, #196]	; (8000b48 <mode1_normal+0x20c>)
 8000a82:	f000 fdba 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( YELLOW_1_GPIO_Port , YELLOW_1_Pin ,GPIO_PIN_RESET ) ;
 8000a86:	2200      	movs	r2, #0
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	482f      	ldr	r0, [pc, #188]	; (8000b48 <mode1_normal+0x20c>)
 8000a8c:	f000 fdb5 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( GREEN_1_GPIO_Port , GREEN_1_Pin ,GPIO_PIN_SET ) ;
 8000a90:	2201      	movs	r2, #1
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <mode1_normal+0x20c>)
 8000a96:	f000 fdb0 	bl	80015fa <HAL_GPIO_WritePin>
		}
		display_1--;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <mode1_normal+0x208>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <mode1_normal+0x208>)
 8000aa2:	6013      	str	r3, [r2, #0]
		display_2--;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <mode1_normal+0x210>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <mode1_normal+0x210>)
 8000aac:	6013      	str	r3, [r2, #0]
		counter--;
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <mode1_normal+0x204>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <mode1_normal+0x204>)
 8000ab6:	6013      	str	r3, [r2, #0]
		if( counter == 0)
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <mode1_normal+0x204>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d109      	bne.n	8000ad4 <mode1_normal+0x198>
			counter = red_timer + green_timer + yellow_timer ;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <mode1_normal+0x1f8>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <mode1_normal+0x1fc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	441a      	add	r2, r3
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <mode1_normal+0x200>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <mode1_normal+0x204>)
 8000ad2:	6013      	str	r3, [r2, #0]
	}

	if( counter_mode1 == 100 || counter_mode1 == 50) {
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <mode1_normal+0x1f4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b64      	cmp	r3, #100	; 0x64
 8000ada:	d003      	beq.n	8000ae4 <mode1_normal+0x1a8>
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <mode1_normal+0x1f4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b32      	cmp	r3, #50	; 0x32
 8000ae2:	d11d      	bne.n	8000b20 <mode1_normal+0x1e4>
		update7SEG_VALUE ( index_mode , display_1 + 1) ;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <mode1_normal+0x214>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <mode1_normal+0x208>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fedd 	bl	80008b0 <update7SEG_VALUE>
		update7SEG_MODE ( index_mode , display_2 + 1) ;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <mode1_normal+0x214>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <mode1_normal+0x210>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff fe8e 	bl	8000824 <update7SEG_MODE>
		index_mode++;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <mode1_normal+0x214>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <mode1_normal+0x214>)
 8000b10:	6013      	str	r3, [r2, #0]
		if( index_mode >= 2)
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <mode1_normal+0x214>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	dd02      	ble.n	8000b20 <mode1_normal+0x1e4>
			index_mode = 0;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <mode1_normal+0x214>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
	}
	counter_mode1--;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <mode1_normal+0x1f4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	4a02      	ldr	r2, [pc, #8]	; (8000b30 <mode1_normal+0x1f4>)
 8000b28:	6013      	str	r3, [r2, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000058 	.word	0x20000058
 8000b34:	2000005c 	.word	0x2000005c
 8000b38:	20000054 	.word	0x20000054
 8000b3c:	20000050 	.word	0x20000050
 8000b40:	20000070 	.word	0x20000070
 8000b44:	2000006c 	.word	0x2000006c
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	20000044 	.word	0x20000044
 8000b50:	20000040 	.word	0x20000040

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fa4e 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f834 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f000 f8ba 	bl	8000cd8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b64:	f000 f86c 	bl	8000c40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b68:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <main+0x64>)
 8000b6a:	f001 f98b 	bl	8001e84 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initialize_variable() ;
 8000b6e:	f7ff faed 	bl	800014c <initialize_variable>
  clear_button() ;
 8000b72:	f7ff fc2d 	bl	80003d0 <clear_button>
  clearLED() ;
 8000b76:	f7ff fd07 	bl	8000588 <clearLED>
  setTimer_MODE(10) ;
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f000 f9b4 	bl	8000ee8 <setTimer_MODE>
  setTimer_VALUE(10) ;
 8000b80:	200a      	movs	r0, #10
 8000b82:	f000 f9cb 	bl	8000f1c <setTimer_VALUE>
  while (1)
  {
    /* USER CODE END WHILE */
	  if( timer_VALUE_flag == 1) {
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <main+0x68>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d104      	bne.n	8000b98 <main+0x44>
		  setTimer_VALUE (10) ;
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f000 f9c4 	bl	8000f1c <setTimer_VALUE>
		  fsm_for_input_processing () ;
 8000b94:	f7ff fb14 	bl	80001c0 <fsm_for_input_processing>
	  }
	  if( timer_MODE_flag == 1) {
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <main+0x6c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d1f2      	bne.n	8000b86 <main+0x32>
		  setTimer_MODE (500) ;
 8000ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba4:	f000 f9a0 	bl	8000ee8 <setTimer_MODE>
		  if( index_mode >= 2)
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <main+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	ddea      	ble.n	8000b86 <main+0x32>
			  index_mode = 0;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <main+0x70>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
	  if( timer_VALUE_flag == 1) {
 8000bb6:	e7e6      	b.n	8000b86 <main+0x32>
 8000bb8:	20000080 	.word	0x20000080
 8000bbc:	2000004c 	.word	0x2000004c
 8000bc0:	20000068 	.word	0x20000068
 8000bc4:	20000040 	.word	0x20000040

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0318 	add.w	r3, r7, #24
 8000bd2:	2228      	movs	r2, #40	; 0x28
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fd10 	bl	80025fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fd14 	bl	800162c <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f8da 	bl	8000dc2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 ff80 	bl	8001b2c <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c32:	f000 f8c6 	bl	8000dc2 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3740      	adds	r7, #64	; 0x40
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c86:	f001 f8ad 	bl	8001de4 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c90:	f000 f897 	bl	8000dc2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 fa43 	bl	800212c <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f889 	bl	8000dc2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 fc0f 	bl	80024e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f87b 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000080 	.word	0x20000080

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_GPIO_Init+0xbc>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a28      	ldr	r2, [pc, #160]	; (8000d94 <MX_GPIO_Init+0xbc>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_GPIO_Init+0xbc>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <MX_GPIO_Init+0xbc>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <MX_GPIO_Init+0xbc>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <MX_GPIO_Init+0xbc>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_MODE_00_Pin|EN_MODE_11_Pin|EN_VALUE_0_Pin|EN_VALUE_1_Pin
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f640 61fe 	movw	r1, #3838	; 0xefe
 8000d22:	481d      	ldr	r0, [pc, #116]	; (8000d98 <MX_GPIO_Init+0xc0>)
 8000d24:	f000 fc69 	bl	80015fa <HAL_GPIO_WritePin>
                          |RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
                          |YELLOW_2_Pin|GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_0_Pin|LED7_1_Pin|LED7_2_Pin|LED7_22_Pin
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000d2e:	481b      	ldr	r0, [pc, #108]	; (8000d9c <MX_GPIO_Init+0xc4>)
 8000d30:	f000 fc63 	bl	80015fa <HAL_GPIO_WritePin>
                          |TEST_Pin|LED7_00_Pin|LED7_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_MODE_00_Pin EN_MODE_11_Pin EN_VALUE_0_Pin EN_VALUE_1_Pin
                           RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin */
  GPIO_InitStruct.Pin = EN_MODE_00_Pin|EN_MODE_11_Pin|EN_VALUE_0_Pin|EN_VALUE_1_Pin
 8000d34:	f640 63fe 	movw	r3, #3838	; 0xefe
 8000d38:	60bb      	str	r3, [r7, #8]
                          |RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
                          |YELLOW_2_Pin|GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2302      	movs	r3, #2
 8000d44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <MX_GPIO_Init+0xc0>)
 8000d4e:	f000 fac3 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_0_Pin LED7_1_Pin LED7_2_Pin LED7_22_Pin
                           LED7_33_Pin LED7_44_Pin LED7_55_Pin LED7_66_Pin
                           LED7_3_Pin LED7_4_Pin LED7_5_Pin LED7_6_Pin
                           TEST_Pin LED7_00_Pin LED7_11_Pin */
  GPIO_InitStruct.Pin = LED7_0_Pin|LED7_1_Pin|LED7_2_Pin|LED7_22_Pin
 8000d52:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d56:	60bb      	str	r3, [r7, #8]
                          |LED7_33_Pin|LED7_44_Pin|LED7_55_Pin|LED7_66_Pin
                          |LED7_3_Pin|LED7_4_Pin|LED7_5_Pin|LED7_6_Pin
                          |TEST_Pin|LED7_00_Pin|LED7_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_GPIO_Init+0xc4>)
 8000d6c:	f000 fab4 	bl	80012d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000d70:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4619      	mov	r1, r3
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_GPIO_Init+0xc0>)
 8000d86:	f000 faa7 	bl	80012d8 <HAL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00

08000da0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading () ;
 8000db2:	f7ff fb47 	bl	8000444 <button_reading>
	timer_run () ;
 8000db6:	f000 f8cb 	bl	8000f50 <timer_run>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc6:	b672      	cpsid	i
}
 8000dc8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dca:	e7fe      	b.n	8000dca <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x5c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x60>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_MspInit+0x60>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d113      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_TIM_Base_MspInit+0x44>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_TIM_Base_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_TIM_Base_MspInit+0x44>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f000 fa03 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e64:	201c      	movs	r0, #28
 8000e66:	f000 fa1c 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr

08000eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebe:	f000 f8e1 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM2_IRQHandler+0x10>)
 8000ece:	f001 f825 	bl	8001f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000080 	.word	0x20000080

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <setTimer_MODE>:

#include "main.h"
#include "global.h"
#include "input_reading.h"

void setTimer_MODE ( int duration ){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	timer_MODE_counter = duration / TIMER_CYCLE ;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <setTimer_MODE+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <setTimer_MODE+0x2c>)
 8000efc:	6013      	str	r3, [r2, #0]
	timer_MODE_flag = 0;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <setTimer_MODE+0x30>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000007c 	.word	0x2000007c
 8000f14:	20000078 	.word	0x20000078
 8000f18:	20000068 	.word	0x20000068

08000f1c <setTimer_VALUE>:

void setTimer_VALUE (int duration ) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	timer_VALUE_counter = duration / TIMER_CYCLE ;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <setTimer_VALUE+0x28>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <setTimer_VALUE+0x2c>)
 8000f30:	6013      	str	r3, [r2, #0]
	timer_VALUE_flag = 0;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <setTimer_VALUE+0x30>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000007c 	.word	0x2000007c
 8000f48:	20000048 	.word	0x20000048
 8000f4c:	2000004c 	.word	0x2000004c

08000f50 <timer_run>:

void timer_run () {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	if( timer_MODE_counter > 0) {
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <timer_run+0x4c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dd0b      	ble.n	8000f74 <timer_run+0x24>
		timer_MODE_counter--;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <timer_run+0x4c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <timer_run+0x4c>)
 8000f64:	6013      	str	r3, [r2, #0]
		if( timer_MODE_counter == 0) timer_MODE_flag = 1;
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <timer_run+0x4c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <timer_run+0x24>
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <timer_run+0x50>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
	}
	if( timer_VALUE_counter > 0) {
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <timer_run+0x54>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dd0b      	ble.n	8000f94 <timer_run+0x44>
		timer_VALUE_counter--;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <timer_run+0x54>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <timer_run+0x54>)
 8000f84:	6013      	str	r3, [r2, #0]
		if( timer_VALUE_counter == 0) timer_VALUE_flag = 1;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <timer_run+0x54>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <timer_run+0x44>
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <timer_run+0x58>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
	}
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000078 	.word	0x20000078
 8000fa0:	20000068 	.word	0x20000068
 8000fa4:	20000048 	.word	0x20000048
 8000fa8:	2000004c 	.word	0x2000004c

08000fac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ff96 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fc8:	4c09      	ldr	r4, [pc, #36]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f001 faed 	bl	80025b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff fdbb 	bl	8000b54 <main>
  bx lr
 8000fde:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	08002650 	.word	0x08002650
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	200000cc 	.word	0x200000cc

08000ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_2_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x28>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f923 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff feda 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f93b 	bl	80012be <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f903 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x20>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000008 	.word	0x20000008
 80010a4:	200000c8 	.word	0x200000c8

080010a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_GetTick+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	200000c8 	.word	0x200000c8

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4906      	ldr	r1, [pc, #24]	; (8001154 <__NVIC_EnableIRQ+0x34>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff90 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff2d 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff42 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff90 	bl	80011ac <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5f 	bl	8001158 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff35 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b08b      	sub	sp, #44	; 0x2c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	e148      	b.n	800157e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ec:	2201      	movs	r2, #1
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8137 	bne.w	8001578 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4aa3      	ldr	r2, [pc, #652]	; (800159c <HAL_GPIO_Init+0x2c4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d05e      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001314:	4aa1      	ldr	r2, [pc, #644]	; (800159c <HAL_GPIO_Init+0x2c4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d875      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800131a:	4aa1      	ldr	r2, [pc, #644]	; (80015a0 <HAL_GPIO_Init+0x2c8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d058      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001320:	4a9f      	ldr	r2, [pc, #636]	; (80015a0 <HAL_GPIO_Init+0x2c8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d86f      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001326:	4a9f      	ldr	r2, [pc, #636]	; (80015a4 <HAL_GPIO_Init+0x2cc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d052      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 800132c:	4a9d      	ldr	r2, [pc, #628]	; (80015a4 <HAL_GPIO_Init+0x2cc>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d869      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001332:	4a9d      	ldr	r2, [pc, #628]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d04c      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001338:	4a9b      	ldr	r2, [pc, #620]	; (80015a8 <HAL_GPIO_Init+0x2d0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d863      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800133e:	4a9b      	ldr	r2, [pc, #620]	; (80015ac <HAL_GPIO_Init+0x2d4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d046      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
 8001344:	4a99      	ldr	r2, [pc, #612]	; (80015ac <HAL_GPIO_Init+0x2d4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d85d      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d82a      	bhi.n	80013a4 <HAL_GPIO_Init+0xcc>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d859      	bhi.n	8001406 <HAL_GPIO_Init+0x12e>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <HAL_GPIO_Init+0x80>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	080013d3 	.word	0x080013d3
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080013bf 	.word	0x080013bf
 8001364:	08001401 	.word	0x08001401
 8001368:	08001407 	.word	0x08001407
 800136c:	08001407 	.word	0x08001407
 8001370:	08001407 	.word	0x08001407
 8001374:	08001407 	.word	0x08001407
 8001378:	08001407 	.word	0x08001407
 800137c:	08001407 	.word	0x08001407
 8001380:	08001407 	.word	0x08001407
 8001384:	08001407 	.word	0x08001407
 8001388:	08001407 	.word	0x08001407
 800138c:	08001407 	.word	0x08001407
 8001390:	08001407 	.word	0x08001407
 8001394:	08001407 	.word	0x08001407
 8001398:	08001407 	.word	0x08001407
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013c9 	.word	0x080013c9
 80013a4:	4a82      	ldr	r2, [pc, #520]	; (80015b0 <HAL_GPIO_Init+0x2d8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013aa:	e02c      	b.n	8001406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e029      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	3304      	adds	r3, #4
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	e024      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	3308      	adds	r3, #8
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e01f      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	330c      	adds	r3, #12
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e01a      	b.n	8001408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013da:	2304      	movs	r3, #4
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e013      	b.n	8001408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	611a      	str	r2, [r3, #16]
          break;
 80013f2:	e009      	b.n	8001408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f4:	2308      	movs	r3, #8
 80013f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	615a      	str	r2, [r3, #20]
          break;
 80013fe:	e003      	b.n	8001408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x130>
          break;
 8001406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d801      	bhi.n	8001412 <HAL_GPIO_Init+0x13a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_Init+0x13e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	d802      	bhi.n	8001424 <HAL_GPIO_Init+0x14c>
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x152>
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	3b08      	subs	r3, #8
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	210f      	movs	r1, #15
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8090 	beq.w	8001578 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001458:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <HAL_GPIO_Init+0x2dc>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a55      	ldr	r2, [pc, #340]	; (80015b4 <HAL_GPIO_Init+0x2dc>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_GPIO_Init+0x2dc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_GPIO_Init+0x2e0>)
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a49      	ldr	r2, [pc, #292]	; (80015bc <HAL_GPIO_Init+0x2e4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1e0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <HAL_GPIO_Init+0x2e8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a47      	ldr	r2, [pc, #284]	; (80015c4 <HAL_GPIO_Init+0x2ec>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1d8>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e004      	b.n	80014ba <HAL_GPIO_Init+0x1e2>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x1e2>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_GPIO_Init+0x1e2>
 80014b8:	2300      	movs	r3, #0
 80014ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ca:	493b      	ldr	r1, [pc, #236]	; (80015b8 <HAL_GPIO_Init+0x2e0>)
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e4:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	4937      	ldr	r1, [pc, #220]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800150c:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800150e:	68da      	ldr	r2, [r3, #12]
 8001510:	492d      	ldr	r1, [pc, #180]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	60cb      	str	r3, [r1, #12]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4929      	ldr	r1, [pc, #164]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001524:	4013      	ands	r3, r2
 8001526:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4923      	ldr	r1, [pc, #140]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	491f      	ldr	r1, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800154c:	4013      	ands	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4919      	ldr	r1, [pc, #100]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4915      	ldr	r1, [pc, #84]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001574:	4013      	ands	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3301      	adds	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	f47f aeaf 	bne.w	80012ec <HAL_GPIO_Init+0x14>
  }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	372c      	adds	r7, #44	; 0x2c
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	10320000 	.word	0x10320000
 80015a0:	10310000 	.word	0x10310000
 80015a4:	10220000 	.word	0x10220000
 80015a8:	10210000 	.word	0x10210000
 80015ac:	10120000 	.word	0x10120000
 80015b0:	10110000 	.word	0x10110000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	40010800 	.word	0x40010800
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001616:	e003      	b.n	8001620 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	041a      	lsls	r2, r3, #16
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	611a      	str	r2, [r3, #16]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
	...

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e26c      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8087 	beq.w	800175a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b04      	cmp	r3, #4
 8001656:	d00c      	beq.n	8001672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001658:	4b8f      	ldr	r3, [pc, #572]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d112      	bne.n	800168a <HAL_RCC_OscConfig+0x5e>
 8001664:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d10b      	bne.n	800168a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001672:	4b89      	ldr	r3, [pc, #548]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d06c      	beq.n	8001758 <HAL_RCC_OscConfig+0x12c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d168      	bne.n	8001758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e246      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x76>
 8001694:	4b80      	ldr	r3, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a7f      	ldr	r2, [pc, #508]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e02e      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x98>
 80016aa:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b78      	ldr	r3, [pc, #480]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a77      	ldr	r2, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e01d      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0xbc>
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a71      	ldr	r2, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6e      	ldr	r2, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016e8:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a67      	ldr	r2, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fcce 	bl	80010a8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fcca 	bl	80010a8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1fa      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0xe4>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fcba 	bl	80010a8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fcb6 	bl	80010a8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1e6      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x10c>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001772:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x18c>
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x176>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e1ba      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4939      	ldr	r1, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e03a      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_RCC_OscConfig+0x270>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fc6f 	bl	80010a8 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fc6b 	bl	80010a8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e19b      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4927      	ldr	r1, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x270>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fc4e 	bl	80010a8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fc4a 	bl	80010a8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e17a      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d03a      	beq.n	80018b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d019      	beq.n	8001876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_RCC_OscConfig+0x274>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff fc2e 	bl	80010a8 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fc2a 	bl	80010a8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e15a      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f000 fa9a 	bl	8001da8 <RCC_Delay>
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_RCC_OscConfig+0x274>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fc14 	bl	80010a8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001882:	e00f      	b.n	80018a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fc10 	bl	80010a8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d908      	bls.n	80018a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e140      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	42420000 	.word	0x42420000
 80018a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	4b9e      	ldr	r3, [pc, #632]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e9      	bne.n	8001884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a6 	beq.w	8001a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b97      	ldr	r3, [pc, #604]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10d      	bne.n	80018ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a93      	ldr	r2, [pc, #588]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b8e      	ldr	r3, [pc, #568]	; (8001b24 <HAL_RCC_OscConfig+0x4f8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x4f8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a8a      	ldr	r2, [pc, #552]	; (8001b24 <HAL_RCC_OscConfig+0x4f8>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fbd1 	bl	80010a8 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff fbcd 	bl	80010a8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	; 0x64
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0fd      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b81      	ldr	r3, [pc, #516]	; (8001b24 <HAL_RCC_OscConfig+0x4f8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x312>
 8001930:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e02d      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x334>
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	e01c      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x356>
 8001968:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a6c      	ldr	r2, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a66      	ldr	r2, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a63      	ldr	r2, [pc, #396]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb81 	bl	80010a8 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fb7d 	bl	80010a8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0ab      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ee      	beq.n	80019aa <HAL_RCC_OscConfig+0x37e>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb6b 	bl	80010a8 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fb67 	bl	80010a8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e095      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8081 	beq.w	8001b16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d061      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d146      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_RCC_OscConfig+0x4fc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb3b 	bl	80010a8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fb37 	bl	80010a8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e067      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5e:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	492d      	ldr	r1, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a19      	ldr	r1, [r3, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	430b      	orrs	r3, r1
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCC_OscConfig+0x4fc>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb0b 	bl	80010a8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb07 	bl	80010a8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e037      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x46a>
 8001ab4:	e02f      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_RCC_OscConfig+0x4fc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff faf4 	bl	80010a8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff faf0 	bl	80010a8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e020      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x498>
 8001ae2:	e018      	b.n	8001b16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e013      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42420060 	.word	0x42420060

08001b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0d0      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d910      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4965      	ldr	r1, [pc, #404]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d040      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e073      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06b      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 0203 	bic.w	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c1c:	f7ff fa44 	bl	80010a8 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7ff fa40 	bl	80010a8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e053      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 020c 	and.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d210      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4922      	ldr	r1, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1d0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f9a2 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002624 	.word	0x08002624
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x30>
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x36>
 8001d2e:	e027      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d32:	613b      	str	r3, [r7, #16]
      break;
 8001d34:	e027      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0c5b      	lsrs	r3, r3, #17
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d62:	fb02 f203 	mul.w	r2, r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e004      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
      break;
 8001d7e:	e002      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d82:	613b      	str	r3, [r7, #16]
      break;
 8001d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d86:	693b      	ldr	r3, [r7, #16]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	007a1200 	.word	0x007a1200
 8001d9c:	08002634 	.word	0x08002634
 8001da0:	08002644 	.word	0x08002644
 8001da4:	003d0900 	.word	0x003d0900

08001da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <RCC_Delay+0x34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <RCC_Delay+0x38>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0a5b      	lsrs	r3, r3, #9
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc4:	bf00      	nop
  }
  while (Delay --);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <RCC_Delay+0x1c>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e041      	b.n	8001e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff f810 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f000 fa6e 	bl	8002304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d001      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e035      	b.n	8001f08 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <HAL_TIM_Base_Start_IT+0x90>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_TIM_Base_Start_IT+0x4e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec6:	d004      	beq.n	8001ed2 <HAL_TIM_Base_Start_IT+0x4e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <HAL_TIM_Base_Start_IT+0x94>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d111      	bne.n	8001ef6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b06      	cmp	r3, #6
 8001ee2:	d010      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef4:	e007      	b.n	8001f06 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40000400 	.word	0x40000400

08001f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d122      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d11b      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0202 	mvn.w	r2, #2
 8001f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f9b4 	bl	80022cc <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f9a7 	bl	80022ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f9b6 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0204 	mvn.w	r2, #4
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f98a 	bl	80022cc <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f97d 	bl	80022ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f98c 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d122      	bne.n	8002020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0208 	mvn.w	r2, #8
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f960 	bl	80022cc <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f953 	bl	80022ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f962 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b10      	cmp	r3, #16
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b10      	cmp	r3, #16
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0210 	mvn.w	r2, #16
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2208      	movs	r2, #8
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f936 	bl	80022cc <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f929 	bl	80022ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f938 	bl	80022de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0201 	mvn.w	r2, #1
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fe80 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa6b 	bl	80025a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b40      	cmp	r3, #64	; 0x40
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8fc 	bl	80022f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b20      	cmp	r3, #32
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b20      	cmp	r3, #32
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0220 	mvn.w	r2, #32
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fa36 	bl	8002590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_TIM_ConfigClockSource+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e0b4      	b.n	80022b2 <HAL_TIM_ConfigClockSource+0x186>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800216e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002180:	d03e      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0xd4>
 8002182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002186:	f200 8087 	bhi.w	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 800218a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218e:	f000 8086 	beq.w	800229e <HAL_TIM_ConfigClockSource+0x172>
 8002192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002196:	d87f      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 8002198:	2b70      	cmp	r3, #112	; 0x70
 800219a:	d01a      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0xa6>
 800219c:	2b70      	cmp	r3, #112	; 0x70
 800219e:	d87b      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 80021a0:	2b60      	cmp	r3, #96	; 0x60
 80021a2:	d050      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x11a>
 80021a4:	2b60      	cmp	r3, #96	; 0x60
 80021a6:	d877      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 80021a8:	2b50      	cmp	r3, #80	; 0x50
 80021aa:	d03c      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0xfa>
 80021ac:	2b50      	cmp	r3, #80	; 0x50
 80021ae:	d873      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 80021b0:	2b40      	cmp	r3, #64	; 0x40
 80021b2:	d058      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x13a>
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d86f      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 80021b8:	2b30      	cmp	r3, #48	; 0x30
 80021ba:	d064      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x15a>
 80021bc:	2b30      	cmp	r3, #48	; 0x30
 80021be:	d86b      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d060      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x15a>
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d867      	bhi.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05c      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x15a>
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d05a      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x15a>
 80021d0:	e062      	b.n	8002298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f000 f95e 	bl	80024a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	609a      	str	r2, [r3, #8]
      break;
 80021fe:	e04f      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f000 f947 	bl	80024a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002222:	609a      	str	r2, [r3, #8]
      break;
 8002224:	e03c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f8be 	bl	80023b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2150      	movs	r1, #80	; 0x50
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f915 	bl	800246e <TIM_ITRx_SetConfig>
      break;
 8002244:	e02c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f000 f8dc 	bl	8002410 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2160      	movs	r1, #96	; 0x60
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f905 	bl	800246e <TIM_ITRx_SetConfig>
      break;
 8002264:	e01c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	461a      	mov	r2, r3
 8002274:	f000 f89e 	bl	80023b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2140      	movs	r1, #64	; 0x40
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f8f5 	bl	800246e <TIM_ITRx_SetConfig>
      break;
 8002284:	e00c      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	4610      	mov	r0, r2
 8002292:	f000 f8ec 	bl	800246e <TIM_ITRx_SetConfig>
      break;
 8002296:	e003      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
      break;
 800229c:	e000      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800229e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <TIM_Base_SetConfig+0xa8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x28>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x28>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <TIM_Base_SetConfig+0xac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <TIM_Base_SetConfig+0xa8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0x52>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0x52>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <TIM_Base_SetConfig+0xac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d108      	bne.n	8002368 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <TIM_Base_SetConfig+0xa8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d103      	bne.n	800239c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	615a      	str	r2, [r3, #20]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400

080023b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f023 0201 	bic.w	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f023 030a 	bic.w	r3, r3, #10
 80023f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f023 0210 	bic.w	r2, r3, #16
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800243a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	031b      	lsls	r3, r3, #12
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800244c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	621a      	str	r2, [r3, #32]
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	f043 0307 	orr.w	r3, r3, #7
 8002490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b087      	sub	sp, #28
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	021a      	lsls	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	609a      	str	r2, [r3, #8]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e041      	b.n	800257c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a14      	ldr	r2, [pc, #80]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d004      	beq.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10c      	bne.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	4313      	orrs	r3, r2
 8002560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40000400 	.word	0x40000400

08002590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <__libc_init_array>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	2600      	movs	r6, #0
 80025b8:	4d0c      	ldr	r5, [pc, #48]	; (80025ec <__libc_init_array+0x38>)
 80025ba:	4c0d      	ldr	r4, [pc, #52]	; (80025f0 <__libc_init_array+0x3c>)
 80025bc:	1b64      	subs	r4, r4, r5
 80025be:	10a4      	asrs	r4, r4, #2
 80025c0:	42a6      	cmp	r6, r4
 80025c2:	d109      	bne.n	80025d8 <__libc_init_array+0x24>
 80025c4:	f000 f822 	bl	800260c <_init>
 80025c8:	2600      	movs	r6, #0
 80025ca:	4d0a      	ldr	r5, [pc, #40]	; (80025f4 <__libc_init_array+0x40>)
 80025cc:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <__libc_init_array+0x44>)
 80025ce:	1b64      	subs	r4, r4, r5
 80025d0:	10a4      	asrs	r4, r4, #2
 80025d2:	42a6      	cmp	r6, r4
 80025d4:	d105      	bne.n	80025e2 <__libc_init_array+0x2e>
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025dc:	4798      	blx	r3
 80025de:	3601      	adds	r6, #1
 80025e0:	e7ee      	b.n	80025c0 <__libc_init_array+0xc>
 80025e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e6:	4798      	blx	r3
 80025e8:	3601      	adds	r6, #1
 80025ea:	e7f2      	b.n	80025d2 <__libc_init_array+0x1e>
 80025ec:	08002648 	.word	0x08002648
 80025f0:	08002648 	.word	0x08002648
 80025f4:	08002648 	.word	0x08002648
 80025f8:	0800264c 	.word	0x0800264c

080025fc <memset>:
 80025fc:	4603      	mov	r3, r0
 80025fe:	4402      	add	r2, r0
 8002600:	4293      	cmp	r3, r2
 8002602:	d100      	bne.n	8002606 <memset+0xa>
 8002604:	4770      	bx	lr
 8002606:	f803 1b01 	strb.w	r1, [r3], #1
 800260a:	e7f9      	b.n	8002600 <memset+0x4>

0800260c <_init>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	bf00      	nop
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr

08002618 <_fini>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr
